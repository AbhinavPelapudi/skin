@import "icon-mixins.less";

// UTILITY MIXINS
// --------------------------------------------------
// Webkit-style focus
// ------------------

.tab-focus() {
    // Default
    outline: thin dotted #333;
    // Webkit
    outline: 5px auto -webkit-focus-ring-color;
    outline-offset: -2px;
}

// Center-align a block level element
// ----------------------------------
.center-block() {
    display: block;
    margin-left: auto;
    margin-right: auto;
}

// IE7 inline-block
// ----------------
.ie7-inline-block() {
    *display: inline;
    /* IE7 inline-block hack */
    *zoom: 1;
}

// IE7 likes to collapse whitespace on either side of the inline-block elements.
// Ems because we're attempting to match the width of a space character. Left
// version is for form buttons, which typically come after other elements, and
// right version is for icons, which come before. Applying both is ok, but it will
// mean that space between those elements will be .6em (~2 space characters) in IE7,
// instead of the 1 space in other browsers.
.ie7-restore-left-whitespace() {
    *margin-left: .3em;
    &:first-child {
        *margin-left: 0;
    }
}
.ie7-restore-right-whitespace() {
    *margin-right: .3em;
}

// Sizing shortcuts
// -------------------------
.size(@height, @width) {
    width: @width;
    height: @height;
}
.button-size(@height; @width; @line-height) {
    width: @width;
    height: @height;
    line-height: @line-height;
}
.square(@size) {
    .size(@size, @size);
}

// Placeholder text
// -------------------------
.placeholder(@color) {
    &::-webkit-input-placeholder {
        color: @color;
    }
    &:-moz-placeholder {
        color: @color;
    }
    &::-moz-placeholder {
        color: @color;
    }
    &:-ms-input-placeholder {
        color: @color;
    }
}

// Text overflow
// -------------------------
// Requires inline-block or block for proper styling
.text-overflow() {
    overflow: hidden;
    text-overflow: ellipsis;
    white-space: nowrap;
}

// CSS3 PROPERTIES
// --------------------------------------------------
// Border Radius
.border-radius(@radius) {
    border-radius: @radius;
}
// Single Corner Border Radius
.border-top-left-radius(@radius) {
    border-top-left-radius: @radius;
}
.border-top-right-radius(@radius) {
    border-top-right-radius: @radius;
}
.border-bottom-right-radius(@radius) {
    border-bottom-right-radius: @radius;
}
.border-bottom-left-radius(@radius) {
    border-bottom-left-radius: @radius;
}

// Single Side Border Radius
.border-top-radius(@radius) {
    .border-top-right-radius(@radius);
    .border-top-left-radius(@radius);
}
.border-right-radius(@radius) {
    .border-top-right-radius(@radius);
    .border-bottom-right-radius(@radius);
}
.border-bottom-radius(@radius) {
    .border-bottom-right-radius(@radius);
    .border-bottom-left-radius(@radius);
}
.border-left-radius(@radius) {
    .border-top-left-radius(@radius);
    .border-bottom-left-radius(@radius);
}

// Drop shadows
.box-shadow(@shadow) {
    box-shadow: @shadow;
}
// Transitions
.transition(@transition) {
    transition: @transition;
}
.transition-delay(@transition-delay) {
    transition-delay: @transition-delay;
}
.transition-duration(@transition-duration) {
    transition-duration: @transition-duration;
}
// Transformations
.rotate(@degrees) {
    transform: rotate(@degrees);
}
.scale(@ratio) {
    transform: scale(@ratio);
}
.translate(@x, @y) {
    transform: translate(@x, @y);
}
.skew(@x, @y) {
    transform: skew(@x, @y);
}
.translate3d(@x, @y, @z) {
    transform: translate3d(@x, @y, @z);
}

// Backface visibility
// Prevent browsers from flickering when using CSS 3D transforms.
// Default value is `visible`, but can be changed to `hidden

.backface-visibility(@visibility) {
    backface-visibility: @visibility;
}

// Background clipping
// Heads up: FF 3.6 and under need "padding" instead of "padding-box"
.background-clip(@clip) {
    background-clip: @clip;
}
// Background sizing
.background-size(@size) {
    background-size: @size;
}
// Box sizing
.box-sizing(@boxmodel) {
    box-sizing: @boxmodel;
}
// User select
// For selecting text on the page
.user-select(@select) {
    user-select: @select;
}
// Resize anything
.resizable(@direction) {
    resize: @direction; // Options: horizontal, vertical, both
    overflow: auto; // Safari fix
}

// CSS3 Content Columns
.content-columns(@column-count, @column-gap, @column-rule) {
    column-count: @column-count;
    column-gap: @column-gap;
    column-rule: @column-rule;
}

// Optional hyphenation
.hyphens(@mode: auto) {
    word-wrap: break-word;
    hyphens: @mode;
}

// Opacity
.opacity(@opacity: 0.5) {
    opacity: @opacity;
    @opperc: @opacity * 100;
    filter: ~"alpha(opacity=@{opperc})";
}

// Reset filters for IE
.reset-filter() {
    filter: e(%("progid:DXImageTransform.Microsoft.gradient(enabled = false)"));
}

//font alterations
.font-define(@size: .86rem; @weight: normal; @color: #ddd; @textDecoration: none) {
    font-size: @size;
    font-weight: @weight;
    color: @color;
    text-decoration: @textDecoration;
}

//collapse margins and padding
.m-p-collapse() {
    margin: 0;
    padding: 0;
}
//create stacking context
.stacking-context() {
    position: relative;
    z-index: 1;
}
.stacking-context-0() {
    position: relative;
    z-index: 0;
}
//boilerplate for before-after pseudo elements
.before-after() {
    content: '';
    position: relative;
}
//boilerplate for before-after absolutely positioned pseudo elements
.before-after-abs() {
    content: '';
    position: absolute;
}
//mixin for clearfix
.mixin-clearfix() {
    *zoom: 1;
    &:before, &:after {
        display: table;
        content: " ";
        line-height: 0;
    }
    &:after {
        clear: both;
    }
}
.ul-reset() {
    list-style: none;
    margin: 0;
    padding: 0;
}

// Flexbox Mixins
.mixin-display-flex() {
    display: flex;
}

// none | [ <'flex-grow'> <'flex-shrink'>? || <'flex-basis'> ]
// flex-grow: <number>; (default 0)// flex-shrink: <number>    (default 1) // flex-basis: <length> | auto
.mixin-flex(@value) {
    flex: @value;
}

// Flex Flow Direction
// - applies to: flex containers
// row | row-reverse | column | column-reverse
.flex-direction(@direction) {
    flex-direction: @direction;
}

// Flex Line Wrapping
// - applies to: flex containers
// nowrap | wrap | wrap-reverse
.flex-wrap(@wrap) {
    flex-wrap: @wrap;
}
// Flex grow factor
// - applies to: flex items
// <number>
.flex-grow(@grow) {
    flex-grow: @grow;
}
// Axis Alignment
// - applies to: flex containers
// flex-start | flex-end | center | space-between | space-around
.justify-content(@justify) {
    justify-content: @justify;
}
.triangle (@_, @color, @size) {
    width: 0;
    height: 0;
    display: inline-block;
}
.triangle (top, @size, @color) {
    border-top: @size solid @color;
    border-left: @size solid transparent;
    border-right: @size solid transparent;
    border-bottom: 0;
}
.triangle (right, @size, @color) {
    border-right: @size solid @color;
    border-top: @size solid transparent;
    border-bottom: @size solid transparent;
    border-left: 0;
}
.triangle (bottom, @size, @color) {
    border-bottom: @size solid @color;
    border-left: @size solid transparent;
    border-right: @size solid transparent;
    border-top: 0;
}
.triangle (left, @size, @color) {
    border-left: @size solid @color;
    border-top: @size solid transparent;
    border-bottom: @size solid transparent;
    border-right: 0;
}

// Ellipsis
.ellipse(@count) when (@count > 1) {
    display: -webkit-box;
    overflow: hidden;
    text-overflow: ellipsis;
    /* number of lines to show */
    -webkit-line-clamp: @count;
    -webkit-box-orient: vertical;
}


.ellipse(@count) when (@count = 1) {
    display: inline-block;
    overflow: hidden;
    max-width: 100%;
    text-overflow: ellipsis;
    white-space: nowrap;
}

// Responsive utilities
// Responsive image
// Keep images from scaling beyond the width of their parents.
.img-responsive(@display: block) {
    display: @display;
    max-width: 100%; // Part 1: Set a maximum relative to the parent
    height: auto; // Part 2: Scale the height according to the width, otherwise you get stretching
}

// Component animations
// --------------------------------------------------
.fade() {
    opacity: 0;
    .transition(opacity .15s linear);
    &.in {
        opacity: 1;
    }
}
.collapse() {
    display: none;
    &.in {
        display: block;
    }
    tr&.in {
        display: table-row;
    }
    tbody&.in {
        display: table-row-group;
    }
}
.collapsing() {
    position: relative;
    height: 0;
    overflow: hidden;
    .transition(height .35s ease);
}
.mixin-clipped() {
    position: absolute;
    clip: rect(1px 1px 1px 1px); /* IE6, IE7 */
    clip: rect(1px, 1px, 1px, 1px);
    padding: 0;
    border: 0;
    height: 1px;
    width: 1px;
    overflow: hidden;
}