describe("jquery.keyboardtrap.js", function() {

    jasmine.DEFAULT_TIMEOUT_INTERVAL = 1000;

    var timeoutInterval = jasmine.DEFAULT_TIMEOUT_INTERVAL - 500;

    var eventHandlerMocks = {
        onDeactivate : function(e) {},
        onInnerButtonFocus : function(e) {},
        onOuterButtonFocus : function(e) {}
    };

    beforeEach(function() {
        $('body').empty();
    });

    it("should have class keyboard-trap--active when trapped", function() {
        var $trap = $('<div id="trap" tabindex="0">');

        // setup DOM
        $('body').append($trap);
        // init plugin
        $.trapKeyboard($trap);

        var expected = true;
        var actual = $trap.hasClass('keyboard-trap--active');

        // assert
        expect(actual).toEqual(expected);
    });

    it("should have four trap boundaries when trapped", function() {
        var $trap = $('<div id="trap" tabindex="0">');

        // setup DOM
        $('body').append($trap);
        // init plugin
        $.trapKeyboard($trap);

        var expected = 4;
        var actual = $('.keyboard-trap-boundary').size();

        // assert
        expect(actual).toEqual(expected);
    });

    it("should have zero trap boundaries when untrapped", function() {
        var $trap = $('<div id="trap" tabindex="0">');

        // setup DOM
        $('body').append($trap);
        // init plugin
        $.trapKeyboard($trap);
        // remove plugin
        $.untrapKeyboard();

        var expected = 0;
        var actual = $('.keyboard-trap-boundary').size();

        // assert
        expect(actual).toEqual(expected);
    });

    it("should not have class keyboard-trap--active when untrapped", function() {
        var $trap = $('<div id="trap" tabindex="0">');

        // setup DOM
        $('body').append($trap);
        // init plugin
        $.trapKeyboard($trap);
        // remove plugin
        $.untrapKeyboard();

        var expected = false;
        var actual = $trap.hasClass('keyboard-trap--active');

        // assert
        expect(actual).toEqual(expected);
    });

    it("should deactivate trap on forced focusexit from container when deactivateOnFocusExit=true", function(done) {
        var $trap = $('<div id="trap" tabindex="0">'),
            $outerButton = $('<button>');

        // setup DOM
        $('body').append($trap).append($outerButton);

        // init plugin
        $.trapKeyboard($trap);

        // spy on event
        spyOn(eventHandlerMocks, 'onDeactivate');

        // execute
        $trap.on('off.keyboardTrap', eventHandlerMocks.onDeactivate);
        $trap.focus();
        $outerButton.focus();

        // assert
        setTimeout(function() {
            expect(eventHandlerMocks.onDeactivate).toHaveBeenCalled();
            done();
        }, timeoutInterval);
    });

    it("should not deactivate trap on forced focusexit from container when deactivateOnFocusExit=false", function(done){
        var $trap = $('<div id="trap" tabindex="0">'),
            $outerButton = $('<button>');

        // setup DOM
        $('body').append($trap).append($outerButton);

        // init plugin
        $.trapKeyboard($trap, {deactivateOnFocusExit:false});

        // spy on event
        spyOn(eventHandlerMocks, 'onDeactivate');

        // execute
        $trap.on('off.keyboardTrap', eventHandlerMocks.onDeactivate);
        $trap.focus();
        $outerButton.focus();

        // assert
        setTimeout(function() {
            expect(eventHandlerMocks.onDeactivate).not.toHaveBeenCalled();
            done();
        }, timeoutInterval);
    });

    it("should deactivate trap on forced focusexit from descendant when deactivateOnFocusExit=true", function(done){
        var $trap = $('<div id="trap">'),
            $innerButton = $('<button>'),
            $outerButton = $('<button>');

        // setup DOM
        $trap.append($innerButton);
        $('body').append($trap).append($outerButton);

        // init plugin
        $.trapKeyboard($trap);

        // spy on event
        spyOn(eventHandlerMocks, 'onDeactivate');

        // execute
        $trap.on('off.keyboardTrap', eventHandlerMocks.onDeactivate);
        $innerButton.focus();
        $outerButton.focus();

        // assert
        setTimeout(function() {
            expect(eventHandlerMocks.onDeactivate).toHaveBeenCalled();
            done();
        }, timeoutInterval);
    });

    it("should not deactivate trap on forced focusexit from descendant when deactivateOnFocusExit=false", function(done){
        var $trap = $('<div id="trap">'),
            $innerButton = $('<button>'),
            $outerButton = $('<button>');

        // setup DOM
        $trap.append($innerButton);
        $('body').append($trap).append($outerButton);

        // init plugin
        $.trapKeyboard($trap, {deactivateOnFocusExit:false});

        // spy on event
        spyOn(eventHandlerMocks, 'onDeactivate');

        // execute
        $trap.on('off.keyboardTrap', eventHandlerMocks.onDeactivate);
        $innerButton.focus();
        $outerButton.focus();

        // assert
        setTimeout(function() {
            expect(eventHandlerMocks.onDeactivate).not.toHaveBeenCalled();
            done();
        }, timeoutInterval);
    });
});
