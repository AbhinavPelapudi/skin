var gulp = require('gulp');
var uglify = require('gulp-uglify');
var gp_rename = require('gulp-rename');
var jshint = require('gulp-jshint');
var del = require('del');
var jshintXMLReporter = require('gulp-jshint-xml-file-reporter');
var KarmaServer = require('karma').Server;
var karmaConfig = { configFile: __dirname + '/karma.conf.js' };

// this task deletes all generated (i.e. non-source) files
gulp.task('clean', function () {
    return del([
        'jquery.*.min.js',
        'jshint.xml',
        'coverage',
        'target',
        'karma_html'
    ]);
});

// this task lints the plugin, it fails build on error, reports to xml & stdout
gulp.task('lint', function() {
    return gulp.src('jquery.screenreadertrap.js')
        .pipe(jshint())
        .pipe(jshint.reporter(jshintXMLReporter))
        .on('end', jshintXMLReporter.writeFile({
            format: 'checkstyle',
            filePath: './jshint.xml',
            alwaysReport: true
        }))
        .pipe(jshint.reporter('default'))
        .pipe(jshint.reporter('fail'));
});

// this task starts the karma test runner
gulp.task('test', ['lint'], function (done) {
    new KarmaServer(karmaConfig, done).start();
});

// this task creates a compressed/minified version plugin
gulp.task('compress', function() {
    return gulp.src('jquery.screenreadertrap.js')
        .pipe(uglify())
        .pipe(gp_rename('jquery.screenreadertrap.min.js'))
        .pipe(gulp.dest(__dirname));
});

// this task will run the 'test' task after any change to the plugin or tests
gulp.task('watch', function() {
    gulp.watch(['jquery.*.js','test.js'], ['test']);
});

// the default task runs 'test' then 'watch'
gulp.task('default', ['test', 'watch']);
