/**
* @function jquery.screenreadertrap.js
* @version 0.1.1
* @author Ian McBurnie <imcburnie@ebay.com>
* @desc Restricts virtual cursor to the given element and it's children. This is
* achieved by adding aria-hidden=true to all siblings and ancestor siblings of
* the trapped element. Any elements that have aria-hidden=true state BEFORE
* the trap is activated must have their state preserved. All elements are marked
* with a data attribute so that we can easily undo the trap and maintain
* pre-existing state. Note this plugin does not trap regular keyboard focus.
* @fires on.screenreaderTrap
* @fires off.screenreaderTrap
*/
(function ($, window, document, undefined) {

    var $trappedEl;

    $.trapScreenreader = function trapScreenReader(el) {
        $.untrapScreenreader();

        $trappedEl = $(el);

        var trappedId = $trappedEl.prop('id');

        // the trapped element must not be hidden
        $trappedEl.attr('aria-hidden', 'false').attr('data-screenreadertrap', trappedId);
        // the trapped element's siblings must be hidden
        $trappedEl.siblings(':not([aria-hidden=true])').attr('aria-hidden', 'true').attr('data-screenreadertrap', trappedId);
        // the trapped element's ancestors must not be hidden
        $trappedEl.parents(':not(html, body, script)').attr('aria-hidden', 'false').attr('data-screenreadertrap', trappedId);
        // the trapped element's ancestors's siblings must be hidden
        $trappedEl.parents(':not(html, body, script)').siblings(':not([aria-hidden=true])').attr('aria-hidden', 'true').attr('data-screenreadertrap', trappedId);

        $trappedEl.trigger('on.screenreaderTrap');
    };

    $.untrapScreenreader = function untrapScreenReader() {
        if ($trappedEl) {
            $('[data-screenreadertrap]').removeAttr('aria-hidden').removeAttr('data-screenreadertrap');
            $trappedEl.trigger('off.screenreaderTrap');
        }
    };

}(jQuery, window, document));
